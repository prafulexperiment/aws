Lab 8.2: Running Containers on a Managed Service
Task 1: Preparing the development environment
1.	In the AWS Management Console, connect to the AWS Cloud9 integrated development environment (IDE) named Cloud9 Instance.
2.	Download and extract the files that you need for this lab.
a.	In the same terminal, run the following command:
3.	wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACCDEV-2-91558/07-lab-deploy/code.zip -P /home/ec2-user/environment
a.	To extract the files, run the following command:
4.	unzip code.zip
5.	Run a script to upgrade the version of Python and the AWS CLI that are installed on the Cloud9 instance. The script will also recreate the work that you completed in earlier labs into this AWS account.
a.	Set permissions on the script so that you can run it, and then run the script:
6.	chmod +x ./resources/setup.sh && ./resources/setup.sh
a.	When prompted for an IP address,.
b.	In the AWS Cloud9 Bash terminal (at the bottom of the IDE), run the following command:
7.	aws --version
8.	pip show boto3
9.	Confirm access to the café website.
a.	Navigate to the Amazon S3 console.
b.	Choose the link for the bucket that has -s3bucket in the name.
c.	Choose the Properties tab, then scroll down to the Static website hosting section. 
d.	Choose the URL that appears under Bucket website endpoint.
10.	The café website displays in a new browser tab. If it doesn't, see the following troubleshooting tip.
a.	Open your preferred text editor, and copy and paste the following text into a new file.
a.	Cloud9 VPC ID:
b.	Cloud9 Availability Zone:
c.	Cloud9 subnet ID:
d.	extraSubnetForRds subnet ID:
e.	Cloud9 security group ID:
f.	Database endpoint:
g.	Repository URI:
h.	Elastic Beanstalk URL:
11.	 
12.	As you progress through the lab steps, you will save the IDs of several resources. You will use this information later when you deploy your application to Elastic Beanstalk.
Task 2: Configuring the subnets for Amazon RDS and Elastic Beanstalk to use
Even if only a single application instance and database instance will be used initially, more than one subnet is required for this configuration. Further, each subnet used in an Amazon RDS or load-balanced Elastic Beanstalk deployment must be in a different Availability Zone.
When this lab environment launched, a VPC was created, but it only has one subnet. In this task, you will review the existing subnet and create a second one. You will also ensure that both subnets have a route to the public internet.
11.	Navigate to the Amazon VPC console.
o	Return to the AWS Management Console browser tab.
o	From the Services menu, choose VPC.
o	In the left navigation pane, choose Your VPCs.
o	Select the checkbox for Cloud9 VPC, and then copy the VPC ID into your text editor. 
12.	Review the Availability Zone for the Cloud9 subnet.
o	In the left navigation pane, choose Subnets.
o	Select the checkbox for Cloud9 subnet. 
o	In the bottom pane, locate the Availability Zone and copy the value into your text editor.
The Availability Zone looks similar to the following: us-east-1a
o	Copy the Subnet ID value into your text editor as the Cloud9 subnet ID. 
 
13.	Create a second subnet to provide high availability for the database and application in the future:
o	Choose Create subnet and configure the following:
▪	VPC ID: Choose Cloud9 VPC
o	Subnet name: Enter extraSubnetForRds
▪	Availability Zone: Choose a different Availability Zone than the one that the Cloud9 subnet is using
o	IPv4 CIDR block: Enter 10.16.2.0/24 
▪	Choose Create subnet.
o	Configure the subnet to automatically assign a public IP address:
▪	Select the checkbox for extraSubnetForRds.
▪	From the Actions menu, select Edit subnet settings.
▪	Select the checkbox for Enable auto-assign public IPv4 address.
▪	Choose Save.
o	In a text editor, record the Subnet ID as the extraSubnetForRds subnet ID.
 
14.	Update the route table for the extraSubnetForRds subnet.
o	Select the checkbox for extraSubnetForRds.
o	In the bottom pane, choose the Route table tab, and review the route table.
Notice that this route table does not include a path to the public internet (0.0.0.0/0). For this configuration to work, you need to update the route table association for this subnet.
o	Choose Edit route table association.
The subnet is currently configured to use the Main route table.
o	For Route table ID, choose the other route table.
o	Choose Save then choose the Route table tab.
In the Routes section, you now find two entries that are similar to the following:
Destination	Target
10.16.0.0/16	local
0.0.0.0/0	igw-xxxxxxxxx
15.	Because Elastic Beanstalk must be able to reach the public internet, the route table for the Cloud9 subnet and extraSubnetForRds must include a route to 0.0.0.0/0 using the Internet Gateway (igw-xxxxxxxxxx). Elastic Beanstalk will be able to create an EC2 instance in either of these subnets. This route will allow the instance to reach the outside world regardless of the subnet that Elastic Beanstalk uses to deploy the application.
 
Next, you will create a new database that the coffee suppliers application will use. 
 
Task 3: Setting up an Aurora Serverless database
Instead of running the database on an EC2 instance or in a Docker container, the application will use the Aurora Serverless managed service as the data platform. 
In this task, you will create a new Aurora Serverless instance.
15.	Create an Aurora Serverless database instance.
o	In the search box to the right of Services, search for and choose RDS.
o	In the Create database panel under the Resources panel, choose Create database.
▪	In the Choose a database creation method section, choose Standard create.
▪	In the Engine options section, configure the following: 
▪	Engine type: Choose Aurora(MySQL-Compatible)
▪	Version: Choose Aurora MySQL 3.07.0 (compatible with MySQL 8.0.36)
▪	In the Templates section, choose Dev/Test.
▪	In the Settings section, configure the following:
▪	DB cluster identifier: Enter supplierdb
▪	Under Credentials management, choose Self managed.
▪	Ensure that Auto generate a password is NOT checked
▪	Master password: Enter coffee_beans_for_all
📓 Confirm password: Re-enter the password
▪	In the Instance configuration section, configure the following:
▪	DB instance class: Choose Serverless v2
▪	Also note the default Capacity range settings (Minimum 2 ACU, Maximum 16 ACU) but do not change them.
▪	In the Connectivity section, configure the following:
▪	Virtual Private Cloud (VPC): Choose Cloud9 VPC
▪	Under VPC security group (firewall), choose Existing VPC security groups
▪	Remove the default security group
▪	From the Dropdown, add the security group with Cloud9-Instance in the name
▪	Under RDS Data API, Select Checkbox for Enable the RDS Data API.
▪	Under Monitoring > Performance Insights 
▪	UnCheck/DeSelect Enable Performance Insights (cluster level)
▪	Expand Additional configuration (Enhanced Monitoring)
▪	Uncheck/DeSelect Enable Enhanced Monitoring
▪	Expand Additional configuration
▪	For Initial database name, enter suppliers
▪	Keep rest of the parameters at their default values and Choose Create database.
Note: If you see a pop-up similar to Suggested add-ons for supplierDB, choose Close.
Note: Wait for the database to get created, it will take a few minutes.
16.	Find the endpoint for your database.
o	Choose the supplierdb hyperlink displayed at the top.
o	From the DB identifier , select supplierdb-instance-1.
▪	Note: Wait for the Status to become Available.
o	On the In the bottom pane, in the Connectivity & security section
▪	Copy the Endpoint name value to your text editor.
The endpoint is similar to supplierdb.cluster-xxxxxxxxxxx.us-east-1.rds.amazonaws.com.
 
17.	Find the ID for the database security group.
o	In the Security section, choose the VPC security groups hyperlink.
o	On the Security Groups page, in the bottom pane, on the Details tab, copy the Security group ID value to your text editor.
The security group ID is similar to sg-123456acbde.
 
While the database is still being created, move to the next task and review your container image.
 
Task 4: Reviewing the container image
In a previous lab, you created a Docker image of the coffee suppliers application, which was written in Node.js. You then uploaded the node application image to Amazon ECR. 
In this task, you will review the details of the image that was uploaded to Amazon ECR. 
 
18.	Review the Docker image in the console.
o	In the search box to the right of Services, search for and choose Elastic Container Registry.
o	For the cafe/node-web-app repository, copy the URI value to your text editor as the Repository URI.
o	Choose the cafe/node-web-app hyperlink, and review the details.
 
19.	Review this same Docker image information in the AWS Cloud9 terminal.
o	Return to the AWS Cloud9 browser tab.
o	Run the following command:
aws ecr describe-repositories
The output is similar to the following:
20.	Next, to inspect the cafe/node-web-app image, run the following command in the AWS Cloud9 terminal:
aws ecr describe-images --repository-name cafe/node-web-app
The output is similar to the following:
 
Task 5: Configuring communication between the container and the database
Now it's time to test connectivity between the containerized application and the Aurora Serverless database. Initially, you will test the container connectivity from your AWS Cloud9 environment. 
In Task 1, the setup.sh script set up the Docker image in your AWS Cloud9 environment. You do not need to pull the image from Amazon ECR again. 
In a previous lab, you used a command similar to the following to start your container:
docker run -d --name node-web-app-1 -p 3000:3000 -e APP_DB_HOST="<ip-address>" cafe/node-web-app
This time, instead of using the IP address of a database host, you will set the value for APP_DB_HOST to the database endpoint that you saved in a previous task.
 
21.	Start your container.
o	In the AWS Cloud9 terminal, enter the following command. Replace <db-endpoint> with the Database endpoint value from your text editor.
docker run -d --name node-web-app-1 -p 80:3000 -e APP_DB_HOST="<db-endpoint>" cafe/node-web-app
The updated command looks similar to the following:
docker run -d --name node-web-app-1 -p 80:3000 -e APP_DB_HOST="supplierdb.cluster-cltkajxxxxxx.us-east-1.rds.amazonaws.com" cafe/node-web-app
o	Run the updated command.
The output is similar to the following:
ab3a49274fa2f154d583cd6f5cf934d03229647644699a3e38c53f5678df0246
22.	To test the container application from the AWS Cloud9 terminal, run the following command:
curl http://localhost:80
The response is similar to the following:
<!DOCTYPE html>
23.	Configure the security group of the AWS Cloud9 EC2 instance.
As in a previous lab, you need to add a rule so that you can view the website on port 80:
o	Return to the AWS Management Console browser tab.
o	In the search box to the right of Services, search for and choose EC2.
o	In the left navigation pane, choose Security Groups.
o	Select the checkbox for the security group that has Cloud9-Instance in the name.
o	In the lower pane, choose the Inbound rules tab.
o	Choose Edit inbound rules.
o	Add an entry for the application port:
▪	Choose Add rule
▪	Type: Choose HTTP
▪	Source: Choose My IP
 
For the application to communicate with the database, add another rule that allows inbound communication on port 3306.
o	Add an entry for the database port:
▪	Choose Add rule
▪	Type: Choose MYSQL/Aurora
▪	Source: Choose Custom
▪	From the Source search box, choose the Cloud9-Instance security group that you are currently editing.
This rule is self referencing to allow any call that originates from this security group to communicate with the database.
▪	Choose Save rules.
Now, your application can connect to your Amazon RDS instance from AWS Cloud9 as you test your work.
 
24.	Locate the public IP address of your AWS Cloud9 instance.
o	In the left navigation pane, choose Instances.
o	Choose the Cloud9-Instance.
o	In the bottom pane, choose the Details tab, and copy the Public IPv4 address value to your clipboard.
25.	In a new browser tab, paste the Public IPv4 address in the address bar.
The coffee suppliers web application displays. 
 
26.	Choose List of suppliers.
.
 
Task 6: Creating the application database objects
In this task, you will the create database objects that the application requires.
 
27.	Connect to the Amazon RDS query editor.
o	Return to the AWS Management Console browser tab.
o	In the search box to the right of Services, search for and choose RDS.
o	In the left navigation pane, choose Query Editor, and configure the following:
▪	Database instance or cluster: Choose supplierdb
▪	Database username: Choose Add new database credentials
▪	Enter database username: Enter admin
▪	Enter database password: Enter coffee_beans_for_all
▪	Enter the name of the database or schema: Enter suppliers
▪	Choose Connect to database.
28.	Create the database objects that support the coffee suppliers application.
o	On the Editor tab, delete the contents of the text area, and paste in the following code:
CREATE USER "nodeapp" IDENTIFIED WITH mysql_native_password BY "coffee";
CREATE DATABASE COFFEE;
USE COFFEE;
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON *.* TO 'nodeapp'@'%' WITH GRANT OPTION;
CREATE TABLE suppliers(
                    id INT NOT NULL AUTO_INCREMENT,
                    name VARCHAR(255) NOT NULL,
                    address VARCHAR(255) NOT NULL,
                    city VARCHAR(255) NOT NULL,
                    state VARCHAR(255) NOT NULL,
                    email VARCHAR(255) NOT NULL,
                    phone VARCHAR(100) NOT NULL,
                    PRIMARY KEY ( id ));
o	Choose Run.
 
29.	Verify that the suppliers table is empty.
o	Replace the contents in the text area with the following code:
use COFFEE; 
select * from suppliers
o	Choose Run.
The Result set pane looks similar to the following, which indicates that the table is empty.
 
o	Keep this browser tab open on the Query Editor page.
 
30.	Try again to access the supplier information from the web application.
o	Return to the browser tab that is connected to the coffee suppliers application.
o	Refresh the page.
Instead of an error message, the page displays an empty suppliers table and an Add a new supplier button.
31.	 
32.	Choose Add a new supplier and add a new item to the table.
 
33.	View the record in the query editor.
o	Return to the Amazon RDS query editor browser tab.
o	To run the query again, choose Run.
The Result set pane displays the record that you added using the web application.
Task 7: Seeding the database with supplier data
The supplier has provided Sofía with the latest SQL dump from their supplier database. This data needs to be loaded into the Aurora Serverless instance.
In this task, you will load the supplier data into the COFFEE database.
 
33.	Review the supplier data.
o	Return to the AWS Cloud9 browser tab.
o	To change the directory to resources, run the following command:
cd ~/environment/resources
o	From the Environment pane in Cloud9, open the resources/coffee_db_dump.sql file and review its contents. 
34.	Connect to the database.
o	Run the following command in the terminal window. Replace <db-endpoint> with the Database endpoint value from your text editor.
mysql -h <db-endpoint> -P 3306 -u admin -p
o	When prompted for the password, enter coffee_beans_for_all
The output looks similar to the following:
mysql>
o	To verify that you are connected to the correct database, run the following command:
use COFFEE; select * from suppliers;
The command returns the record or records that you added through the web application. The output looks similar to the following:
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> select * from suppliers
    -> ;
 
35.	To use the SQL dump to update your database with the information from the supplier, run the following command at the mysql prompt:
source coffee_db_dump.sql
36.	Review the data that was loaded into the database.
o	To query the suppliers table, run the following command at the mysql prompt:
use COFFEE; select * from suppliers;
The supplier also provided coffee bean information in a table called beans. You will use this data on the café website too.
 
o	To query the beans table, run the following command at the mysql prompt:
select * from beans;
o	To return to the terminal shell, type exit
 
37.	View the updated supplier information from the application webpage. 
o	Return to the browser tab that is connected to the coffee suppliers application.
o	Refresh the page.
The suppliers are now listed on the page, which looks similar to the following:
 
 
Task 8: Review the IAM policy and role for Elastic Beanstalk
When Elastic Beanstalk deploys the application, it will launch a new EC2 instance. Then, the EC2 instance will pull the Docker image for the coffee suppliers application from Amazon ECR and start the container. You must use an IAM policy and associated role to give the EC2 instance permission to get images from Amazon ECR.
In this task, you will create the IAM policy and role that EC2 needs to access Amazon ECR.
 
38.	Review the Elastic Beanstalk IAM policy that will be used with your Docker environment.
o	Return to the AWS Management Console browser tab.
o	From the Services menu, choose IAM.
o	In the left navigation pane, choose Policies.
o	In the search text box, enter aws-elasticbeanstalk-ec2-instance-policy then select the hyperlink of the policy.
o	In the Permissions tab, choose the JSON option and review the policy statement:
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "ecr:GetAuthorizationToken"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "AllowEbAuth"
        },
        {
            "Action": [
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "ecr:BatchCheckLayerAvailability"
            ],
            "Resource": "*",
            "Effect": "Allow",
            "Sid": "AllowPull"
        },
        {
            "Effect": "Allow",
            "Action": [
                elasticbeanstalk:Put*
             ],
             "Resource": "*"
        }
    ]
}
Notice that the Sid named AllowEbAuth allows the EC2 instances to retrieve the authorization token. The other Sid, AllowPull, allows the EC2 instances to download the docker image from the repository. The last statement in the policy allows the Elastic Beanstalk service to report instance statistics to the beanstalk application.
 
39.	Review the role that will be used by the Elastic Beanstalk Docker environment.
o	In the left navigation pane, choose Roles.
o	In the search text box, enter aws-elasticbeanstalk-ec2-role.
o	In the Trust relationships tab, notice that the EC2 service, ec2.amazonaws.com, is defined as a Trusted entity.
o	In the Permissions tab, locate the policy that is associated with the Role. 
You will find that this role is using the aws-elasticbeanstalk-ec2-instance-policy policy you just examined.
 
Elastic Beanstalk will use this role for all of the instances that it launches. Initially, you will start with just one instance.
 
Task 9: Creating an Elastic Beanstalk application
With the necessary permissions, networking configuration, and services in place, it's time to deploy the Elastic Beanstalk application. First, you will deploy a sample application. Then, you will update the application to use the coffee suppliers website image.
 
40.	Create a sample Elastic Beanstalk application.
o	Return to the AWS Cloud9 browser tab.
o	To change to the environment directory, run the following command:
cd ~/environment
o	To create a new folder called bean, run the following command:
mkdir bean
o	To change to the bean directory, run the following command:
cd bean
o	To create a sample application named MyNodeApp, run the following command:
aws elasticbeanstalk create-application --application-name MyNodeApp
The output from the previous command looks similar to the following:
{
    "Application": {
        "ApplicationArn": "arn:aws:elasticbeanstalk:us-east-1:455065222927:application/MyNodeApp",
        "ApplicationName": "MyNodeApp",
        "DateCreated": "2021-05-19T17:45:40.748Z",
        "DateUpdated": "2021-05-19T17:45:40.748Z",
        "ConfigurationTemplates": [],
        "ResourceLifecycleConfig": {
            "VersionLifecycleConfig": {
                "MaxCountRule": {
                    "Enabled": false,
                    "MaxCount": 200,
                    "DeleteSourceFromS3": false
                },
                "MaxAgeRule": {
                    "Enabled": false,
                    "MaxAgeInDays": 180,
                    "DeleteSourceFromS3": false
                }
            }
        }
    }
}
 
41.	Create an Elastic Beanstalk environment.
o	In AWS Cloud9, in the bean folder, create a new file named options.txt and open it.
o	Paste the following text into the options.txt file:
[
    {
        "Namespace": "aws:autoscaling:launchconfiguration",
        "OptionName": "IamInstanceProfile",
        "Value": "aws-elasticbeanstalk-ec2-role"
    },
    {
        "Namespace": "aws:autoscaling:launchconfiguration",
        "OptionName": "SecurityGroups",
        "Value": "<FMI_1>"
    },
    {
        "Namespace": "aws:ec2:vpc",
        "OptionName": "VPCId",
        "Value": "<FMI_2>"
    },
    {
        "Namespace": "aws:ec2:vpc",
        "OptionName": "Subnets",
        "Value": "<FMI_3>,<FMI_4>"
    },
    {
        "Namespace": "aws:elasticbeanstalk:application:environment",
        "OptionName": "APP_DB_HOST",
        "Value": "<FMI_5>"
    }
]
o	In the options.txt file, replace the placeholders with the values that you saved in your text editor as follows:
▪	<FMI_1>: Cloud9 security group ID
▪	<FMI_2>: Cloud9 VPC ID
▪	<FMI_3>: Cloud9 subnet ID
▪	<FMI_4>: extraSubnetforRds subnet ID
▪	<FMI_5>: Database endpoint
The updated file will look similar to the following. Note that your values will be different.
[
    {
        "Namespace": "aws:autoscaling:launchconfiguration",
        "OptionName": "IamInstanceProfile",
        "Value": "aws-elasticbeanstalk-ec2-role"
    },
    {
        "Namespace": "aws:autoscaling:launchconfiguration",
        "OptionName": "SecurityGroups",
        "Value": "sg-0e52adxxxxxxxx"
    },
    {
        "Namespace": "aws:ec2:vpc",
        "OptionName": "VPCId",
        "Value": "vpc-09d7xxxxxxxxx"
    },
    {
        "Namespace": "aws:ec2:vpc",
        "OptionName": "Subnets",
        "Value": "subnet-005ca7bedxxxxxxx,subnet-04a1eec73xxxxxxx"
    },
    {
        "Namespace": "aws:elasticbeanstalk:application:environment",
        "OptionName": "APP_DB_HOST",
        "Value": "supplierdb.cluster-cltkaxxxxxxx.us-east-1.rds.amazonaws.com"
    }
]
o	Save the file.
o	To identify the currently available solution stack for Amazon Linux 2, run the following command in the AWS Cloud9 terminal:
aws elasticbeanstalk list-available-solution-stacks|grep 'running Docker'
The output contains the solution stack name and looks similar to the following. Note that the version number might be higher:
64bit Amazon Linux 2 v4.0.5 running Docker
Tip: Use the result that runs on Amazon Linux 2.
o	In the AWS Cloud9 terminal, make sure you are in the bean directory.
o	Run the following command. Replace the <solution-stack-name> placeholder with the name of the available solution stack:
aws elasticbeanstalk create-environment --application-name MyNodeApp --environment-name MyEnv --solution-stack-name "<solution-stack-name>"  --region us-east-1 --option-settings file://options.txt
The updated command looks similar to the following:
aws elasticbeanstalk create-environment --application-name MyNodeApp --environment-name MyEnv --solution-stack-name "64bit Amazon Linux 2 v4.0.5 running Docker"  --region us-east-1 --option-settings file://options.txt
The output looks similar to the following:
{
    "EnvironmentName": "MyEnv",
    "EnvironmentId": "e-b966fxxxxx",
    "ApplicationName": "MyNodeApp",
    "SolutionStackName": "64bit Amazon Linux 2 v3.6.4 running Docker",
    "PlatformArn": "arn:aws:elasticbeanstalk:us-east-1::platform/Docker running on 64bit Amazon Linux 2/3.6.4",
    "DateCreated": "2023-12-01T19:44:17.565000+00:00",
    "DateUpdated": "2023-12-01T19:44:17.565000+00:00",
    "Status": "Launching",
    "Health": "Grey",
    "Tier": {
        "Name": "WebServer",
        "Type": "Standard",
        "Version": "1.0"
    },
    "EnvironmentArn": "arn:aws:elasticbeanstalk:us-east-1:13557xxxxxxxx:environment/MyNodeApp/MyEnv"
}
Tip: If necessary, type q to return to the command prompt.
 
42.	To stop the Docker container that is running on the AWS Cloud9 instance, run the following command:
docker stop node-web-app-1 && docker rm node-web-app-1
 
43.	Review your Elastic Beanstalk environment in the AWS Management Console.
o	Return to the AWS Management Console tab.
o	From the Services menu, choose Elastic Beanstalk.
o	For the MyEnv environment, the Health displays Pending.
o	At the bottom under the Events tab.
The environment creation will take several minutes, but it's interesting to watch what is happening. The following screenshot provides an example of what the console displays:
 
44.	 
o	At the top navigation area, under MyEnv you can see the status of the environment.
o	Wait for the environment to be ready before moving to the next step. When the environment is ready, Health displays Ok under an image of a check mark, as shown in the following screenshot: 
 
45.	 
46.	Your Elastic Beanstalk application is now up and running. Try it out!
 
44.	Test the sample Elastic Beanstalk application.
o	At the top of the page, locate the domain for this environment.
The domain looks similar to the following: MyEnv.eba-xxxxxxx.us-east-1.elasticbeanstalk.com
o	Choose the domain hyperlink to open it in a new browser tab.
The sample application displays and looks like the following:
 
45.	 
46.	You have deployed the sample application, and all of the required scaffolding is in place. Now, you only need to tell Elastic Beanstalk to use your code.
 
45.	Update the application with the code for the coffee suppliers application.
The code is in the image that you uploaded to Amazon ECR. For now, you will deploy the application to Elastic Beanstalk manually. In a later lab, you will learn to automate deployments.
o	On your local computer, create a new text file called Dockerrun.aws.json.
o	Paste the following text into the file:
{
"AWSEBDockerrunVersion": "1",
"Image": {
    "Name": "<FMI_1>",
    "Update": "true"
},
"Ports": [ { "ContainerPort" : 3000 } ]
}
Note: The configuration file uses port 3000 instead of port 80. Elastic Beanstalk will proxy port 80 to your container port 3000 on single docker container environments such as this one.
 
o	In the file, replace the <FMI_1> placeholder with the Repository URI value from your text editor.
o	Save the changes to the file.
o	Return to the AWS Management Console browser tab.
o	On the MyEnv environment page within the Elastic Beanstalk console, choose Upload and deploy.
o	Navigate to and choose the Dockerrun.aws.json file.
o	For Version label, append the letter a to the default MyNodeApp-version-1
o	Keep the current deployment preferences.
o	Choose Deploy and observe the deployment process.
If you want to follow what is happening, observe the Recent events section.
After a few minutes, the page updates and looks like the following:
 
 
46.	Test the Elastic Beanstalk deployment of the coffee suppliers application.
o	Copy the MyEnv domain URL to your text editor as the Elastic Beanstalk URL.
o	Choose the domain hyperlink to open it in a new browser tab.
The coffee suppliers application opens. 
o	Choose List of suppliers.
The page displays the same list of suppliers that you loaded into the database earlier in the lab.
The application does not have a button or link to display the beans database information yet. However, to test the beans database query, you can update the application URL.
o	In the browser address bar, replace /suppliers in the URL with /beans.
The updated URL looks similar to the following: http://myenv.eba-xxxxxxxxx.us-east-1.elasticbeanstalk.com/beans
The page displays the inventory details of the available coffee bean varieties.
o	In the browser address bar, append the URL with .json
The updated URL looks similar to the following: http://myenv.eba-xxxxxxxxx.us-east-1.elasticbeanstalk.com/beans.json
The page now displays the same inventory details but in JSON format. You will use this URL in the API Gateway configuration because the café website code expects to receive data formatted in JSON.
 
Task 10: Configuring the API Gateway proxy
Well done! You now have a working Elastic Beanstalk environment. You can access supplier information and coffee bean inventory using the coffee suppliers application.
However, you need to be able to access the coffee bean inventory directly from the café website. Good news! You can leverage the URL that returns the beans data in JSON format (beans.json) to add this functionality.
 
47.	Find the Amazon S3 URL for the café website.
o	In the browser tab with these lab instructions, choose Details.
o	Next to AWS, choose Show.
o	Save the WebsiteURL value to your text editor. 
 
48.	Review the coffee suppliers integration with the application.
o	In a new browser tab, paste the WebsiteURL.
o	From the menu in the upper-left corner, choose Buy Coffee. 
Notice that the Buy Coffee section displays a message that this section is coming soon. Once you set up API Gateway to call the Elastic Beanstalk application, that will change.
 
49.	Create an API Gateway resource.
o	Return to the AWS Management Console browser tab.
o	From the Services menu, choose API Gateway.
o	Choose the ProductsApi hyperlink.
o	In the Resources pane, keep the top-level "/" resource selected, as shown in the following image:
 
o	Choose Create resource, and configure the following:
▪	Resource Path: Keep the default / selection
▪	Resource Name: Enter bean_products
💁‍♂ Note: Ensure the resource name value has an underscore. 
▪	Select CORS (Cross Origin Resource Sharing)
📓 Note: CORS is required to enable communication between your website and the endpoint.
▪	Choose Create resource.
 
50.	Create an API Gateway method.
o	In the Resources pane, ensure that the /bean_products resource is selected, as shown in the following image:
 
o	In the Methods panel, choose Create method.
o	For Method type choose GET.
o	Configure the following:
▪	Integration type: Choose HTTP
▪	Toggle HTTP proxy integration to on
▪	For HTTP method choose GET 
▪	For Endpoint URL, enter the following. Replace the <FMI_1> placeholder with the Elastic Beanstalk URL from your text editor:
http://<FMI_1>/beans.json
The updated URL looks similar to the following: http://MyEnv.eba-3xxxxxxxx.us-east-1.elasticbeanstalk.com/beans.json
The following image shows the options that you should select on this page (your Endpoing URL will be different):

▪	Choose Create method.
o	Choose the Test tab.
o	In the Test method panel, choose Test at the bottom of the page.
The response output looks similar to the following:
51.	Deploy the API changes.
o	In the Resources pane, choose the top-level "/" resource.
o	Choose Deploy API.
o	For Stage, choose prod.
o	Choose Deploy.
Note: If you see an error message that you do not have permissions for Web Application Firewall, ignore the message.
 
52.	Test the new API resource in the café application.
o	Return to the browser tab where you opened the WebsiteURL. Reload the page if you already had it open.
o	From the menu in the upper-left corner, choose Buy Coffee.
This section of the café application now displays the coffee bean inventory information.
 
