Lab 6.1: Developing REST APIs with Amazon API Gateway
Task 1: Preparing the development environment
1.	In this first task, you will configure your AWS Cloud9 environment so that you can create the REST API.
2.	From the AWS Management Console, connect to the AWS Cloud9 IDE named Cloud9 Instance.
3.	Download and extract the files that you will need for this lab.
a.	In the same terminal, run the following command:
4.	wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACCDEV-2-91558/04-lab-api/code.zip -P /home/ec2-user/environment
a.	Notice that a code.zip file was downloaded to the AWS Cloud9 instance. The file is listed in the Environment window.
b.	Extract the file:
5.	unzip code.zip
a.	Run the script that upgrades the versions of Python and the AWS CLI installed in your IDE environment, and also creates the cafe website in your AWS account.
6.	chmod +x resources/setup.sh && resources/setup.sh
7.	The script will prompt you for the IP address by which your computer is known to the internet.
8.	Verify the version of AWS CLI installed.
9.	aws --version
a.	Run the following command:
10.	pip show boto3
11.	Verify that the cafe website can be loaded in a browser tab.
a.	Load the website in a browser tab.
i.	In a browser tab, open the Amazon S3 console.
ii.	Choose your bucket name, and then choose Objects.
iii.	Choose the index.html file.
iv.	Copy the Object URL. It will be in the following format. https://<bucket-name>.s3.amazon.com/index.html
12.	Note particular website details.
a.	Notice in the Browse Pastries section that there are two buttons.
b.	The "on offer" view displays by default and it shows six menu items.
c.	Select the "view all" view. Notice that many more menu items display.
Task 2: Creating the first API endpoint (GET)
1.	In this task, you will create a REST API called ProductsApi. You will also create the first of three resources for the API.
2.	The first API resource will be called products. It will make a GET request so that the website can retrieve all rows from the FoodProducts DynamoDB database table. You will then deploy it in an API Gateway stage that's named prod. When a user visits the website, it will make an AJAX request and return a list of café menu items from API gateway (it will return mock data for now).
3.	To complete all these tasks, you will use the SDK for Python.
4.	In the AWS Cloud9 navigation pane, expand the python_3 directory and open the file named create_products_api.py.
5.	On line 3, replace the (fill me in) with the correct value that will create an API Gateway client.
6.	Take a moment to analyze the first part of what this code will do when you run it:
a.	Lines 5-24 create a REST API that's named ProductsApi, and a resource that's named products.
b.	Lines 28-33 create a method request of type GET in the products resource.
7.	Run the code.
a.	Save the change to the file.
b.	Then, in the Bash terminal, go to the directory that contains the Python code file, and run the code.
8.	cd python_3
9.	python create_products_api.py
10.	Return to the AWS Management Console browser tab, and open the API Gateway console.
11.	Open the ProductsApi that you just created by choosing the link.
12.	Choose the GET method that you defined.
a.	On the left is the Client.
a.	product_name: {
b.	 "S": "vanilla cupcake"
c.	}
13.	In the API Gateway console, choose the  TEST link, then scroll to the bottom and choose the Test button.
14.	In the panel on the right, you should see the following response body, response headers, and log information.
15.	[
16.	  {
17.	    "product_name_str": "apple pie slice",
18.	    "product_id_str": "a444",
19.	    "price_in_cents_int": 595,
20.	    "description_str": "amazing taste",
21.	    "tag_str_arr": [
22.	      "pie slice",
23.	      "on offer"
24.	    ],
25.	    "special_int": 1
26.	  },
27.	  {
28.	    "product_name_str": "chocolate cake slice",
29.	    "product_id_str": "a445",
30.	    "price_in_cents_int": 595,
31.	    "description_str": "chocolate heaven",
32.	    "tag_str_arr": [
33.	      "cake slice",
34.	      "on offer"
35.	    ]
36.	  },
37.	  {
38.	    "product_name_str": "chocolate cake",
39.	    "product_id_str": "a446",
40.	    "price_in_cents_int": 4095,
41.	    "description_str": "chocolate heaven",
42.	    "tag_str_arr": [
43.	      "whole cake",
44.	      "on offer"
45.	    ]
46.	  }
47.	]
48.	 
49.	Congratulations! You have now successfully created and tested a REST API with a resource that makes a GET request.
Task 3: Creating the second API endpoint (GET)
1.	In this task, you will define another API endpoint of type GET. This endpoint will eventually support calls to/products/on_offer from the cafe website and it will return in stock items.
2.	In the AWS Cloud9 navigation pane, expand the python_3 directory and open the file named create_on_offer_api.py.
3.	Replace <FMI_1> and <FMI_2> with the correct values so that this code file will add another resource to the API that you defined in the previous task.
a.	In a browser tab, go to the API Gateway console and choose the ProductsApi API that you created a moment ago.
b.	In the panel on the left, choose Resources.
c.	Choose GET under products
d.	In the breadcrumb navigation at the top of the screen (above the Actions menu), you can see APIs > ProductsAPI followed by an id in parenthesis. 
i.	This is the api_id.
e.	On the same line, you will see /products, followed by another id in parenthesis. 
i.	This is the resource parent_id
4.	Create the API resource.
a.	Save the change to the file.
b.	Then in the Bash terminal, verify that the current directory is python_3 and run the code.
5.	python create_on_offer_api.py
6.	Observe the results.
a.	Return to the AWS Management Console browser tab, and open the API Gateway console.
b.	Choose the APIs link in the breadcrumb navigation above, then on the left, open the ProductsApi by choosing the link.
7.	Test the /on_offer resource.
a.	Use the  Test link, the same way you tested the first resource in the previous task.
b.	You should receive a 200 HTML status code response.
Task 4: Creating the third API endpoint (POST)
1.	In this task, you will create a third resource for the API, /create_report. This resource will be configured at the same level as /products (not as a nested resource under products).
2.	Café staff who are logged in (authenticated) will later use this API resource to request an inventory report.
3.	In the AWS Cloud9 IDE, if the create_products_api.py file is not already open, open it (you ran this file in Task 2).
4.	Next, in the python_3 directory, also open the create_report_api.py file.
5.	In the main code editor window, right-click the create_report_api.py file tab and choose Split Pane in Two Columns.
6.	Analyze and update the create_report_api.py code. Be sure to compare the code in this file to the create_products_api.py code while you do the analysis and updates.
a.	Replace the <FMI_1> that appears on line 5 with the correct value.
7.	Tip: You could use the console as you did before to discover the api_id. However you can also use the AWS Command Line Interface (AWS CLI) to find the value of the API ID by running the following command:
8.	aws apigateway get-rest-apis --query items[0].id --output text
a.	Analyze the rest of the create_report_api code while comparing it to the create_products_api code. The code in the two files looks similar, but they have some differences:
i.	The httpMethod that's invoked is POST (instead of GET).
ii.	This code creates a new resource with a pathPart of create_report, instead of products.
iii.	The product_integration_response defines three responseParameters. In create_report_api these parameters do not allow Cross-Origin Resource Sharing (CORS), whereas in create_products_api they do allow it.
iv.	The product_integration_response also hardcodes a response for testing purposes, though the user is not authenticated. (The purpose of the test is to ensure that the client can receive a response.)
9.	{
10.	"msg_str": "report requested, check your phone shortly"
11.	}
i.	Save the changes to the file.
12.	In the next step, you will run the code in create_report_api.py.
13.	In the terminal, confirm that you are in the python_3 directory, and then run the code to create the third endpoint.
14.	python create_report_api.py
15.	In the API Gateway console, view the details of the report API that you configured.
a.	Return to the API Gateway console tab and refresh the page.
b.	Confirm that you are in ProductsApi.
c.	In the navigation pane, confirm that Resources is selected, and choose /create_report > POST.
16.	You should see the details of the POST method execution.
17.	Choose the  TEST link, then choose the Test button at the bottom of the screen.
18.	In the panel on the right, you should see the following response body, response headers, and log information.
Task 5: Deploying the API
1.	Deploy the API.
a.	Still in the API Gateway console where you have the ProductsApi details open, under Resources select the root /
b.	From the Actions menu, choose Deploy API and then fill in the details:.
i.	Deployment stage: [New Stage].
ii.	Stage name: prod
iii.	Stage description: (leave blank)
iv.	Deployment description: (leave blank)
c.	Choose Deploy
2.	Copy the Invoke URL value to your clipboard. You will use it next.
3.	Task 6: Updating the website to use the APIs
4.	In this final task in the lab, you will update and then test the website files that are hosted on Amazon S3. After you complete these updates, the website will invoke the REST API that you just created.
5.	Update the website's config.js file.
a.	In the Cloud9 IDE, open resources/website/config.js
b.	On line 2, replace null with the Invoke URL value you copied a moment ago. Be sure to surround it in quotes.
1.	window.COFFEE_CONFIG = {
2.	API_GW_BASE_URL_STR: "https://<some-value>.execute-api.us-east-1.amazonaws.com/prod",
3.	COGNITO_LOGIN_BASE_URL_STR: null
4.	};
c.	Verify that prod appears at the end of the URL with no trailing slash.
d.	Save the change to the file.
6.	Update and then run the update_config.py script.
a.	Open python_3/update_config.py in the text editor.
b.	Replace the <FMI_1> placeholder with the name of your bucket.
7.	Tip: You can find the bucket name in the S3 console, or by running this command:
8.	aws s3 ls
a.	Notice that this script uploads the config.js file that you just editing the previous step, and uploads it to the S3 bucket.
b.	Save the change to the file, then run the script.
9.	python update_config.py
10.	Load the latest café webpage with the developer console view exposed.
a.	If you still have the cafe website open in a browser tab, return to it. If you do not still have it open, reopen it now by following these steps:
i.	In the S3 console, choose the bucket that contains your website files.
ii.	Choose index.html and then copy the Object URL.
iii.	Load the Object URL in a new browser tab.
